{{ 'section-main-product-with-tabs.css' | asset_url | stylesheet_tag }}

{% assign snowboard_length = product.metafields.test_data.snowboard_length.value %}
{% assign binding_mount = product.metafields.test_data.binding_mount.value %}

<div id="section-id-{{ section.id }}" class="page-width tw-py-10">
  <h1 id="sectionTitle" class="tw-text-xl lg:tw-text-4xl tw-mb-6">{{ section.settings.section_title }}</h1>
  <div id="sectionTabs" class="tw-flex tw-flex-col lg:tw-flex-row">
    {% assign section_tabs = section.blocks %}
    {% for tab in section_tabs %}
      {% case tab.type %}
        {%- when 'product_description' -%}
          {% if product.description != blank %}
            <button class="tw-flex tw-justify-between tw-items-center tw-p-5 tw-border tw-border-gray-200 tw-bg-slate-50 hover:tw-bg-slate-100 tw-transition-all tw-duration-300 tw-ease-in-out">{{ tab.settings.title }}
              <span class="tw-inline-block tw-h-2.5 tw-w-2.5 tw-transition-all tw-duration-700 tw-ease-in-out lg:tw-hidden">{% render 'icon-caret' %}</span>
            </button>
          {% endif %}
        {% when 'key_features' %}
          {% if snowboard_length != blank or binding_mount != blank %}
            <button class="tw-flex tw-justify-between tw-items-center tw-p-5 tw-border tw-border-gray-200 tw-bg-slate-50 hover:tw-bg-slate-100 tw-transition-all tw-duration-300 tw-ease-in-out">{{ tab.settings.title }}
              <span class="tw-inline-block tw-h-2.5 tw-w-2.5 tw-transition-all tw-duration-700 tw-ease-in-out lg:tw-hidden">{% render 'icon-caret' %}</span>
            </button>
          {% endif %}
        {% when 'shipping_info' %}
          <button class="tw-flex tw-justify-between tw-items-center tw-p-5 tw-border tw-border-gray-200 tw-bg-slate-50 hover:tw-bg-slate-100 tw-transition-all tw-duration-300 tw-ease-in-out">{{ tab.settings.title }}
            <span class="tw-inline-block tw-h-2.5 tw-w-2.5 tw-transition-all tw-duration-700 tw-ease-in-out lg:tw-hidden">{% render 'icon-caret' %}</span>
          </button>
        {% when 'items_included_in_package' %}
          <button class="tw-flex tw-justify-between tw-items-center tw-p-5 tw-border tw-border-gray-200 tw-bg-slate-50 hover:tw-bg-slate-100 tw-transition-all tw-duration-300 tw-ease-in-out">{{ tab.settings.title }}
            <span class="tw-inline-block tw-h-2.5 tw-w-2.5 tw-transition-all tw-duration-700 tw-ease-in-out lg:tw-hidden">{% render 'icon-caret' %}</span>
          </button>
      {% endcase %}
    {% endfor %}
  </div>
  <div id="sectionTabsContent">
    {% for block in section.blocks %}
      {% case block.type %}
        {%- when 'product_description' -%}
          {% if product.description != blank %}
            <div id="tabContent" class="hidden tw-p-8 tw-border tw-border-gray-200 tw--mt-px">
              {{ product.description }}
            </div>
          {% endif %}
        {% when 'key_features' %}
          {% if snowboard_length != blank or binding_mount != blank %}
            <div id="tabContent" class="hidden tw-p-8 tw-border tw-border-gray-200 tw--mt-px">
              <div class="key_feaures">
                {{ block.settings.key_features_description }}
              </div>
            </div>
          {% endif %}
        {% when 'shipping_info' %}
          <div id="tabContent" class="hidden tw-p-8 tw-border tw-border-gray-200 tw--mt-px">
            <p>{{ block.settings.shipping_info_description }}</p>
          </div>
        {% when 'items_included_in_package' %}
          <div id="tabContent" class="hidden tw-p-8 tw-border tw-border-gray-200 tw--mt-px">
            {% assign number_of_cards = block.settings.number_of_cards %}
            <div class="getDataContainer">
              <p>{{ block.settings.package_text }}</p>
              <button id="getDataButton" class="tw-px-6 tw-py-3 tw-border tw-border-gray-400 tw-rounded-md tw-mt-4 tw-transition-all tw-duration-300 tw-ease-in-out hover:tw-bg-neutral-900 hover:tw-text-white hover:tw-border-transparent">Get Data Now</button>
            </div>
            <div id="cardsContainer" class="tw-flex tw-flex-wrap tw-gap-5"></div>
          </div>
      {% endcase %}
    {% endfor %}
  </div>
</div>

<script>
  window.addEventListener('DOMContentLoaded', ()=>{
    function settingTabs(){
        windowWidth = window.innerWidth;
        const tabs = document.querySelectorAll('#sectionTabs button');
        const allContent = document.querySelectorAll('#tabContent');
        
        if(windowWidth > 810){
          tabs[0].classList.add('active');
          allContent[0].classList.remove('hidden');
        }
        
        tabs.forEach((tab, i)=>{
  
        tab.addEventListener('click', ()=>{
          tabs.forEach(tab=> tab.classList.remove('active'))
          tab.classList.toggle('active');
          allContent.forEach(content => content.classList.add('hidden'))
          allContent[i].classList.remove('hidden')
  
        if(windowWidth < 810){        
          tab.after(allContent[i]);
        }
  
        })
    })
  }
  
  settingTabs()
  
  async function getData() {
    try {
        const response = await fetch('https://jsonplaceholder.typicode.com/todos');
        const data = await response.json();
        return data;
    } catch (error) {
        console.error('Error fetching data:', error);
    }
  }
  
  async function renderData() {
    const limitCards = '{{ number_of_cards }}';
    const template = document.querySelector('#cardsContainer');
    const getDataContainer = document.querySelector('.getDataContainer');
    
    const data = await getData();
    const newData = [];
  
    data.forEach(el=>{
      const x = Math.floor(Math.random() * data.length);
      newData.push(data[x])
      newDataValues = newData.slice(0, Number(limitCards));
    })
    
    newDataValues.forEach((item, i)=>{
      const card = `
      <div class="product-tab-card ${item.completed ? 'completed' : 'not_completed'}">
        <p class="card-number">#${item.id}</p>
        <h2 class="card-title">${item.title}</h2>
        <div class="card-details">
          <span class="card-status">${item.completed ? 'Completed' : 'Not Completed'}</span> | User ID: <span class="card-userId">${item.userId}</span>
        </div>
      </div>`;
      template.insertAdjacentHTML('beforeend', card);
      getDataContainer.classList.add('hidden');
    })
  
    if (!data) {
        return;
    }
  }
  
  const getDataButton = document.querySelector('#getDataButton');
  getDataButton.addEventListener('click', renderData)
  })
</script>

{% schema %}
  {
    "name": "Product with Tabs",
    "tag": "section",
    "class": "section",
    "max_blocks": 4,
    "settings": [
      {
        "type": "text",
        "id": "section_title",
        "label": "Section Title",
        "default": "More about our awesome product"
      }
    ],
    "blocks": [
      {
        "type": "product_description",
        "name": "Product Description",
        "settings": [
          {
            "type": "text",
            "id": "title",
            "label": "Title",
            "default": "Product Description",
            "info": "Don't see the tab if product description is empty"
          }

        ]
      }, {
        "type": "key_features",
        "name": "Key Features",
        "settings": [
          {
            "type": "text",
            "id": "title",
            "label": "Title",
            "default": "Key Features"
          },
          {
            "type": "richtext",
            "id": "key_features_description",
            "label": "Key Features",
            "default": "<ul><li>Snowboard length: {{ product.metafields.test_data.snowboard_length.value }}</li><li>Snowboard binding mount: {{ product.metafields.test_data.binding_mount.value }} </li></ul>",
            "info": "Don't see the tab if product doesn't have any metafields set"
          }
        ]
      }, {
        "type": "shipping_info",
        "name": "Shipping Info",
        "settings": [
          {
            "type": "text",
            "id": "title",
            "label": "Title",
            "default": "Shipping Info"
          },
          {
            "type": "richtext",
            "id": "shipping_info_description",
            "label": "Shipping info",
            "default": "<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.</p>"
          }

        ]
      }, {
        "type": "items_included_in_package",
        "name": "Items included in Package",
        "settings": [
          {
            "type": "text",
            "id": "title",
            "label": "Title",
            "default": "Items included in Package"
          },
          {
            "type": "text",
            "id": "package_text",
            "label": "Text",
            "default": "There is nothing here"
          },
          {
            "type": "range",
            "id": "number_of_cards",
            "min": 3,
            "max": 10,
            "step": 1,
            "label": "Number of Cards to Show",
            "default": 3
          }

        ]
      }
    ],
    "presets": [
      {
        "name": "Product with Tabs",
        "blocks": [
          {
            "type": "product_description"
          }, {
            "type": "key_features"
          }, {
            "type": "shipping_info"
          }, {
            "type": "items_included_in_package"
          }
        ]
      }
    ]
  }
{% endschema %}